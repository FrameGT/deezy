# /etc/nginx/sites-enabled/deezy 

upstream app_server {
	server unix:/tmp/.sock fail_timeout=0;
}

server {
	listen 80 default deferred;

	client_max_body_size 4G;
	server_name _;

	keepalive_timeout 5;

	location /deezy {

		root /opt/deezy/public;

		try_files $uri/index.html $uri.html $uri @app;
	}

	location @app {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# enable this if and only if you use HTTPS, this helps Rack
		# set the proper protocol for doing redirects:
		# proxy_set_header X-Forwarded-Proto https;

		proxy_set_header Host $http_host;

		proxy_redirect off;

		# set "proxy_buffering off" *only* for Rainbows! when doing
		# Comet/long-poll/streaming.  It's also safe to set if you're using
		# only serving fast clients with Unicorn + nginx, but not slow
		# clients.  You normally want nginx to buffer responses to slow
		# clients, even with Rails 3.1 streaming because otherwise a slow
		# client can become a bottleneck of Unicorn.
		#
		# The Rack application may also set "X-Accel-Buffering (yes|no)"
		# in the response headers do disable/enable buffering on a
		# per-response basis.
		# proxy_buffering off;

		proxy_pass http://app_server;
	}

	error_page 500 502 503 504 /500.html;
	location = /500.html {
		root /opt/deezy/public;
	}
}

